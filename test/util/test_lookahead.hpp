//  Copyright (c) 2019 Jonas Ellert
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.

#pragma once

#include <sstream>
#include <util/random.hpp>
#include "test_gen.hpp"

std::vector<vec_type> manual_test_instances_lookahead(const uint64_t instances) {
  std::vector<vec_type> result;
  auto add_string = [&](std::string str) {
    result.push_back(vec_type());
    vec_type &instance = result.back();
    instance.reserve(str.size() + 2);
    instance.push_back(test_gen_sentinel);
    instance.insert(instance.end(), str.begin(), str.end());
    instance.push_back(test_gen_sentinel);
  };



  add_string("ZHZBRVGTEPKFNLGUSWEDORXNGDRLJISYZOLBKGLODCQRPWFKTFXKLYHURUSOYXCNQIMQRFZBBMSYPHZPBUTBBEGDMTRUQBUCXUGVSUWMUONKNERYJPQUXCUMXLMHEWVKZVFCYSVPBOTWMHTOOOHUJFGIJCZPXOYFVDSURRCVPJZGBRRBKBBBKCJNUFFHMPNFLRBLSMUUMTCJRNRERLNYTIICCDNSRDBRSVTCKEIQYUVBTXOIHUDUYFDDRBOBQZSQXVZOZVSYCTJULJPZVIZLTLQNPHDLJMZSZITZWROBKEEEONQZJYYLYHPFKJIMSIHOXGZURPSRPFQPUXQUBOHQGOJJDDDVUKPGVKLKXOBTEJXNECRKQTVROTIJHXOUGCCMQDVKIJFPPFEXKJEWUCDTRQQDUWNZFEMKCMTPRIGLNZUUJHDOUTLZPDBIELMBTIXHJRGBTDBMJDGRJXSBVIKYVMZNPURTUKNLGFWDJLTQDEMDDHOFGXMLBURLQWQMQKZEIEVQTCMERTTHOPLIGNXNKEXFGQYDPIHQWVDXWVLGQPNMSSTYMZVHXIBEPOHXIBSYYXLESGUEWKOLOFVDIGSCHZDOSOYDOEDQIULLQBBCCLDKZXKIUPKHYWUXVNBMJTIURCQIRGTKFVJUXHYXZKRGFUOSGEQVGKGSPHBQPLUTIKOMPTDQUFUTFCPEEKDKZLBewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtAGHZBRVGTEPKFNLGUSWEDORXNGDRLJISYZOLBKGLODCQRPWFKTFXKLYHURUSOYXCNQIMQRFZBBMSYPHZPBUTBBEGDMTRUQBUCXUGVSUWMUONKNERYJPQUXCUMXLMHEWVKZVFCYSVPBOTWMHTOOOHUJFGIJCZPXOYFVDSURRCVPJZGBRRBKBBBKCJNUFFHMPNFLRBLSMUUMTCJRNRERLNYTIICCDNSRDBRSVTCKEIQYUVBTXOIHUDUYFDDRBOBQZSQXVZOZVSYCTJULJPZVIZLTLQNPHDLJMZSZITZWROBKEEEONQZJYYLYHPFKJIMSIHOXGZURPSRPFQPUXQUBOHQGOJJDDDVUKPGVKLKXOBTEJXNECRKQTVROTIJHXOUGCCMQDVKIJFPPFEXKJEWUCDTRQQDUWNZFEMKCMTPRIGLNZUUJHDOUTLZPDBIELMBTIXHJRGBTDBMJDGRJXSBVIKYVMZNPURTUKNLGFWDJLTQDEMDDHOFGXMLBURLQWQMQKZEIEVQTCMERTTHOPLIGNXNKEXFGQYDPIHQWVDXWVLGQPNMSSTYMZVHXIBEPOHXIBSYYXLESGUEWKOLOFVDIGSCHZDOSOYDOEDQIULLQBBCCLDKZXKIUPKHYWUXVNBMJTIURCQIRGTKFVJUXHYXZKRGFUOSGEQVGKGSPHBQPLUTIKOMPTDQUFUTFCPEEKDKZLBewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtAGHZBRVGTEPKFNLGUSWEDORXNGDRLJISYZOLBKGLODCQRPWFKTFXKLYHURUSOYXCNQIMQRFZBBMSYPHZPBUTBBEGDMTRUQBUCXUGVSUWMUONKNERYJPQUXCUMXLMHEWVKZVFCYSVPBOTWMHTOOOHUJFGIJCZPXOYFVDSURRCVPJZGBRRBKBBBKCJNUFFHMPNFLRBLSMUUMTCJRNRERLNYTIICCDNSRDBRSVTCKEIQYUVBTXOIHUDUYFDDRBOBQZSQXVZOZVSYCTJULJPZVIZLTLQNPHDLJMZSZITZWROBKEEEONQZJYYLYHPFKJIMSIHOXGZURPSRPFQPUXQUBOHQGOJJDDDVUKPGVKLKXOBTEJXNECRKQTVROTIJHXOUGCCMQDVKIJFPPFEXKJEWUCDTRQQDUWNZFEMKCMTPRIGLNZUUJHDOUTLZPDBIELMBTIXHJRGBTDBMJDGRJXSBVIKYVMZNPURTUKNLGFWDJLTQDEMDDHOFGXMLBURLQWQMQKZEIEVQTCMERTTHOPLIGNXNKEXFGQYDPIHQWVDXWVLGQPNMSSTYMZVHXIBEPOHXIBSYYXLESGUEWKOLOFVDIGSCHZDOSOYDOEDQIULLQBBCCLDKZXKIUPKHYWUXVNBMJTIURCQIRGTKFVJUXHYXZKRGFUOSGEQVGKGSPHBQPLUTIKOMPTDQUFUTFCPEEKDKZLBewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtA");
  add_string("ZPPJLOLKDLNPNSLXDEOCUDGBTNMFCFRCCHWGJGJMXRDMMXHNLFGJRRDHRTUTUOHDWYJNEKXWPZWNPNBQHHMUKLRTEJYZFEIIDVHDODCSSJOTLBBPIIYKQIMDNLLWUFSDJHPMCJZMXPOSKLPICBDHBYSLYDKIVOBQWQJTLVHCOTCCCRUVOCDXVNOPUQQOMISNGEYPYJOCXCHWSNQSUPCEJRHJRKUWYMQSDKOOFVXVTBFKFXGNCTULELPDIYHMUHFGBZITKREBERGOVEKYTCOSPKXQZCLWWWUJKRQSQZETSORIMMYEZPMDGEWKOLCYEBPZOLRDLRQMZLLDCGIVLKMBSBFVLFSNYHHPWNRLEYZIDSPMEDBXVNNSERPPEKEINPGYZFWMUWVCZSFQNLRNCEKOXCKUGZHOBSGFSFEPPUPEGQKRLXWICRDORFMLSNKSSKSTTIKSBMWSZYDCHUKUOBHYJNEIGFCTGUXXOMCHJSBUQKJLVDXKRVUEUFFJCGSNTMIWDCMRNYETIBHLGQFCHDJUFXXVLUXKPYEGWNVPVCNWWERBUQSGJCJIWHRLHNKTGFOBGHHBUSVGSVEIUZRQZKMYPXNHMLZYOHHOPTFMFWFYOVQEMHBNXIILRFUZOVQOITQQFOHYDPDXBCWITZSTCZVGDGWUYVIBQUJHDBPVMELISBBJMKJQBTewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtAGPPJLOLKDLNPNSLXDEOCUDGBTNMFCFRCCHWGJGJMXRDMMXHNLFGJRRDHRTUTUOHDWYJNEKXWPZWNPNBQHHMUKLRTEJYZFEIIDVHDODCSSJOTLBBPIIYKQIMDNLLWUFSDJHPMCJZMXPOSKLPICBDHBYSLYDKIVOBQWQJTLVHCOTCCCRUVOCDXVNOPUQQOMISNGEYPYJOCXCHWSNQSUPCEJRHJRKUWYMQSDKOOFVXVTBFKFXGNCTULELPDIYHMUHFGBZITKREBERGOVEKYTCOSPKXQZCLWWWUJKRQSQZETSORIMMYEZPMDGEWKOLCYEBPZOLRDLRQMZLLDCGIVLKMBSBFVLFSNYHHPWNRLEYZIDSPMEDBXVNNSERPPEKEINPGYZFWMUWVCZSFQNLRNCEKOXCKUGZHOBSGFSFEPPUPEGQKRLXWICRDORFMLSNKSSKSTTIKSBMWSZYDCHUKUOBHYJNEIGFCTGUXXOMCHJSBUQKJLVDXKRVUEUFFJCGSNTMIWDCMRNYETIBHLGQFCHDJUFXXVLUXKPYEGWNVPVCNWWERBUQSGJCJIWHRLHNKTGFOBGHHBUSVGSVEIUZRQZKMYPXNHMLZYOHHOPTFMFWFYOVQEMHBNXIILRFUZOVQOITQQFOHYDPDXBCWITZSTCZVGDGWUYVIBQUJHDBPVMELISBBJMKJQBTewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtAGPPJLOLKDLNPNSLXDEOCUDGBTNMFCFRCCHWGJGJMXRDMMXHNLFGJRRDHRTUTUOHDWYJNEKXWPZWNPNBQHHMUKLRTEJYZFEIIDVHDODCSSJOTLBBPIIYKQIMDNLLWUFSDJHPMCJZMXPOSKLPICBDHBYSLYDKIVOBQWQJTLVHCOTCCCRUVOCDXVNOPUQQOMISNGEYPYJOCXCHWSNQSUPCEJRHJRKUWYMQSDKOOFVXVTBFKFXGNCTULELPDIYHMUHFGBZITKREBERGOVEKYTCOSPKXQZCLWWWUJKRQSQZETSORIMMYEZPMDGEWKOLCYEBPZOLRDLRQMZLLDCGIVLKMBSBFVLFSNYHHPWNRLEYZIDSPMEDBXVNNSERPPEKEINPGYZFWMUWVCZSFQNLRNCEKOXCKUGZHOBSGFSFEPPUPEGQKRLXWICRDORFMLSNKSSKSTTIKSBMWSZYDCHUKUOBHYJNEIGFCTGUXXOMCHJSBUQKJLVDXKRVUEUFFJCGSNTMIWDCMRNYETIBHLGQFCHDJUFXXVLUXKPYEGWNVPVCNWWERBUQSGJCJIWHRLHNKTGFOBGHHBUSVGSVEIUZRQZKMYPXNHMLZYOHHOPTFMFWFYOVQEMHBNXIILRFUZOVQOITQQFOHYDPDXBCWITZSTCZVGDGWUYVIBQUJHDBPVMELISBBJMKJQBTewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtthgieytnewtdnaderdnuhenohtgnelfoxiferpasisihtA");
  add_string("AthisisaprefixoflengthonehundredandtwentyeightthisisaprefixoflengthonehundredandtwentyeightthisisaprefixoflengthonehundredandtweBOFVVNRMRDTZBXZCJGJTEYEQUPNOIMKJWFPKQCNQQBBBBBTPOZRMOUOFCPSBFBDBXUOGFOGFTDKKILRSMILIBFGLJKSQWBLWITIYCLVHEULRQBLGIFPEFCJBFOCYYTDJOPUSXVSVJRIOJZHSKIHXJMIGHRQGMVYUJONODIRRFXJBYJZUQHZHPTLCTLYEYBDJUNKWLWRMWROHNONGTKDIPYVUCZUFZYNWPTKOPEBXLSKUPSIPEBMRKEVVIXMQTNBKEVQZQUJUZDGUVNFJWESCDWUPCQZPLEJNPGSKSNEEMKBOXKYRULEBXOYVMFJJDMRXMOKPFFDULPZDCKEQIWRMTQVIWWLLSRPQULHOYBCVUFPWLWCRLQRLXQUZOYQQKMJBWKYSNKGSUJZBJIDNTTZMDDKTIXCDYUUEVNHKJVKNNMLXNNINRGXNCTDUGNNLTOZGDMHQPPMEHQSJUXRTCEDOBMTGKHWBHXJSWTBDKJNXZYVCRFTEZSKWPIRTFEIISUKCENFPYKJPICRKSKWYZFDUHTIGSXFWTYTZKNIBHDGFIYISNQNEKBBQGOGILFXJPLUWPWBQZSETKIZVUSUUTVYGETFNSEKQTHWFFTCGXVHNQOFWFSXNPFOMBUJYVUBUZIDBSCFHHOQWQWXCIUZWSKORBPVJBCKSMDMWDPOUFZNMJEKCKGVRDZJQSXXMJLLTGFIFLDFQFFZZQOMLKHXKMIINXGJXNUTDSXSWZUUHOIRUYODNOVUZSQJDXJHGXUJBOXUOPTFTXRNVKNYQZFDSORQULTYCSBVWVPLVNSWHPERHVFEJTMRSGGAthisisaprefixoflengthonehundredandtwentyeightthisisaprefixoflengthonehundredandtwentyeightthisisaprefixoflengthonehundredandtweBOFVVNRMRDTZBXZCJGJTEYEQUPNOIMKJWFPKQCNQQBBBBBTPOZRMOUOFCPSBFBDBXUOGFOGFTDKKILRSMILIBFGLJKSQWBLWITIYCLVHEULRQBLGIFPEFCJBFOCYYTDJOPUSXVSVJRIOJZHSKIHXJMIGHRQGMVYUJONODIRRFXJBYJZUQHZHPTLCTLYEYBDJUNKWLWRMWROHNONGTKDIPYVUCZUFZYNWPTKOPEBXLSKUPSIPEBMRKEVVIXMQTNBKEVQZQUJUZDGUVNFJWESCDWUPCQZPLEJNPGSKSNEEMKBOXKYRULEBXOYVMFJJDMRXMOKPFFDULPZDCKEQIWRMTQVIWWLLSRPQULHOYBCVUFPWLWCRLQRLXQUZOYQQKMJBWKYSNKGSUJZBJIDNTTZMDDKTIXCDYUUEVNHKJVKNNMLXNNINRGXNCTDUGNNLTOZGDMHQPPMEHQSJUXRTCEDOBMTGKHWBHXJSWTBDKJNXZYVCRFTEZSKWPIRTFEIISUKCENFPYKJPICRKSKWYZFDUHTIGSXFWTYTZKNIBHDGFIYISNQNEKBBQGOGILFXJPLUWPWBQZSETKIZVUSUUTVYGETFNSEKQTHWFFTCGXVHNQOFWFSXNPFOMBUJYVUBUZIDBSCFHHOQWQWXCIUZWSKORBPVJBCKSMDMWDPOUFZNMJEKCKGVRDZJQSXXMJLLTGFIFLDFQFFZZQOMLKHXKMIINXGJXNUTDSXSWZUUHOIRUYODNOVUZSQJDXJHGXUJBOXUOPTFTXRNVKNYQZFDSORQULTYCSBVWVPLVNSWHPERHVFEJTMRSGZ");
  add_string("AthisisaprefixoflengthonehundredandtwentyeightthisisaprefixoflengthonehundredandtwentyeightthisisaprefixoflengthonehundredandtweBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBAthisisaprefixoflengthonehundredandtwentyeightthisisaprefixoflengthonehundredandtwentyeightthisisaprefixoflengthonehundredandtweBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBPZCBBZ");




  auto get_prefix = []() {
    return std::string("Athisisaprefixoflengthonehundredandtwentyeightthisisaprefixoflengthonehundredandtwentyeightthisisaprefixoflengthonehundredandtwe");
  };

  auto get_lap = [](const uint64_t id) {
    const static std::string laps[9] = {
        std::string(""),
        std::string("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"),
        std::string("BDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBD"),
        std::string("BYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBYJBY"),
        std::string("BBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZBBPZ"),
        std::string("BGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGHJDBGH"),
        std::string("BLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBLGYMGBL"),
        std::string("BIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBIJEKDLBI"),
        std::string("BETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINOBETOPINO"),
    };
    return laps[id];
  };

  auto get_run = [](const uint64_t id, const uint64_t len) {
    const static std::string periods[9] = {
      std::string(""),
      std::string("C"),
      std::string("BDC"),
      std::string("BYJC"),
      std::string("BBPZC"),
      std::string("BGHJDC"),
      std::string("BLGYMGC"),
      std::string("BIJEKDLC"),
      std::string("BETOPINOC"),
    };

    if (id == 0) return std::string("");
    const auto &str = periods[id];
    const auto reps = len / id;

    std::stringstream result;
    for (uint64_t i = 0; i < reps; ++i) {
      result << str;
    }
    result << str.substr(0, len - (reps * id));
    return result.str();
  };

  auto get_run_finisher = [](const uint64_t id) {
    const static std::string finishers[3] = {
        std::string(""),
        std::string("B"),
        std::string("C")
    };
    return finishers[id];
  };

  auto get_random_suffix = [](const uint64_t len) {
    static random_number_generator rng_c(66, 90);
    std::stringstream stream;
    for (uint64_t i = 0; i < len; ++i) {
      stream << (char)rng_c();
    }
    return stream.str();
  };

  random_number_generator rng1024(0, 1023);
  random_number_generator rng8(0, 8);
  random_number_generator rng3(0, 2);
  random_number_generator rng2(0, 1);

  std::string prefs[4] = {"","","",""};

  for (uint64_t z = 0; z < 10; ++z) {
    std::cout << "Prepared " << 10 * z << "%" << std::endl;
    for (uint64_t i = 0; i < (instances / 10 / 20); ++i) {
      prefs[0] = ((rng2() == 0) ? get_prefix() : "") + get_lap(rng8()) + get_run(rng8(), rng1024()) + get_run_finisher(rng3());
      for (uint64_t j = 1; j < 4; ++j) {
        prefs[j] = prefs[0] + get_random_suffix(rng1024());
      }

      for (uint64_t j = 0; j < 4; ++j) {
        auto &pref = prefs[j];
        add_string(pref + pref);
        add_string(pref + pref + "ZZZ");
        add_string(pref + "ZZZ" + pref);
        add_string(pref + "G" + pref + "G" + pref + "Z");
        add_string(pref + "Z" + pref + "Z" + pref + "G");
      }
    }
  }

//  for (uint64_t i = 0; i < 7; ++i) {
//    for (uint64_t j = 0; j < 7; ++j) {
//      std::cout << "Preparing " << i << " - " << j << std::endl;
//      for (uint64_t k = 0; k < 32; ++k) {
//        const uint64_t kr = rng();
//        for (uint64_t l = 0; l < 3; ++l) {
//          for (uint64_t p = 0; p < 2; ++p) {
//            std::string pref = ((p == 0) ? get_prefix() : "") + get_lap(i) + get_run(j, kr) + get_run_finisher(l);
//            add_string(pref + pref);
//            add_string(pref + pref + "Z");
//            add_string(pref + "G" + pref + "Z");
//            add_string(pref + "Z" + pref + "G");
//            add_string(pref + "G" + pref + "G" + pref + "Z");
//            add_string(pref + "Z" + pref + "Z" + pref + "G");
//            for (int m = 0; m < 8; ++m) {
//              std::string pref2 = pref + get_random_suffix(rng());
//              add_string(pref + pref + pref);
//              add_string(pref + pref + pref + "Z");
//              add_string(pref2 + "G" + pref2 + "Z");
//              add_string(pref2 + "Z" + pref2 + "G");
//              add_string(pref2 + "G" + pref2 + "G" + pref2 + "Z");
//              add_string(pref2 + "Z" + pref2 + "Z" + pref2 + "G");
//            }
//          }
//        }
//      }
//    }
//  }


  // run is aligned and harmless
  // j > i, decreasing run
  add_string(std::string("") + "AjhtehkdfjghjkherhjsldkjfghdhuieraKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKL" + "BB" +
                               "AjhtehkdfjghjkherhjsldkjfghdhuieraKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKL" + "AA");

  add_string(std::string("") + "AjhtehkdfjghjkherhjsldkjfghdhuieraKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKL" + "LL" +
                               "AjhtehkdfjghjkherhjsldkjfghdhuieraKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKL" + "AA");

  // run is aligned and dangerous
  // j > i, decreasing run
  add_string(std::string("") + "AjhtehkdfjghjkherhjsldkjfghdhuierBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKL" + "BB" +
                               "AjhtehkdfjghjkherhjsldkjfghdhuierBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKL" + "AA");

  add_string(std::string("") + "AjhtehkdfjghjkherhjsldkjfghdhuierBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKL" + "LL" +
                               "AjhtehkdfjghjkherhjsldkjfghdhuierBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLG" +
                               "BKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKLGBKL" + "AA");

  // run is not aligned
  // j > i, decreasing run
  add_string(std::string("") + "AasdfasdfasdfasdBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFG" + "BB" +
                               "AasdfasdfasdfasdBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFG" + "AAAAA");

  // j > i, increasing run
  add_string(std::string("") + "AasdfasdfasdfasdBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFG" + "EE" +
                               "AasdfasdfasdfasdBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFG" + "AAAAA");

//  // j < i, decreasing run
//  add_string(std::string("") + "AasdfasdfasdfasdBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFG" + "BB" +
//                               "AasdfasdfasdfasdBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFG" + "ZZZZZ");
//
//  // j < i, increasing run
//  add_string(std::string("") + "AasdfasdfasdfasdBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFG" + "EE" +
//                               "AasdfasdfasdfasdBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFGBDFDFCGFG" + "ZZZZZ");

  return result;
}